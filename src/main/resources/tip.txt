1.spring 事务配置：
声明式事务配置，Spring IoC container's bean如果有@Transactional注解，则具有事务性
默认proxy-target-class:false;mode:proxy
<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" mode="aspectj" order="1"/>
	
	基于接口的代理时，事务的注解只在public类型下才能起效，其他修饰如果要起效可以采用AspectJ模式
	When using proxies, you should apply the @Transactional annotation only to methods with public visibility. 
	If you do annotate protected, private or package-visible methods with the @Transactional annotation, 
	no error is raised, 
	but the annotated method does not exhibit the configured transactional settings. 
	Consider the use of AspectJ (see below) if you need to annotate non-public methods.
	
	You can place the @Transactional annotation before an interface definition,
 	a method on an interface,
	a class definition, or a public method on a class. 
	
	
	基于类的代理需要CGLIB类来实现，JDK默认是基于接口生成代理，注解不能通过接口的实现来继承。所以当你使用基于类的代理或者weaving-based aspect模式时，事务的
	注解不能放在接口或者接口的方法上，要放到具体的类和方法上（proxy模式的话他是直接用接口的事务注解，所以@Transactional可以放到接口上）
	You certainly can place the @Transactional annotation on an interface (or an interface method), 
	but this works only as you would expect it to if you are using interface-based proxies. 
	The fact that Java annotations are not inherited from interfaces means that 
	if you are using class-based proxies ( proxy-target-class="true") or the weaving-based aspect ( mode="aspectj"), 
	then the transaction settings are not recognized by the proxying and weaving infrastructure, 
	and the object will not be wrapped in a transactional proxy, which would be decidedly bad.
	
	
	The default mode "proxy" processes annotated beans to be proxied using Spring’s AOP framework (following proxy semantics, 
	as discussed above, applying to method calls coming in through the proxy only).适用于通过代理来调用 的方法
	The alternative mode "aspectj" instead weaves the affected classes with Spring’s AspectJ transaction aspect, 
	modifying the target class byte code to apply to any kind of method call. 
	AspectJ weaving requires spring-aspects.jar in the classpath as well as load-time weaving (or compile-time weaving) enabled

Test git


